[["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\interfaces\\user.interface.ts",{"fileContent":"export interface User {\n  uid: string;\n  email: string;\n  displayName: string;\n  photoURL: string;\n  emailVerified: boolean;\n  isLoggedIn: boolean;\n}\n","resolvedModuleNames":[]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\app.component.ts",{"fileContent":"import { Component } from '@angular/core';\n@Component({\n  selector: 'app-root',\n  template: '<router-outlet></router-outlet>',\n})\nexport class AppComponent {}\n","resolvedModuleNames":[]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\auth\\guards\\is-auth.guard.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { AuthService } from '@app/auth/services/auth.service';\nimport { Router } from '@angular/router';\nimport { map } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IsAuthGuard {\n  constructor(private authService: AuthService, public router: Router) {}\n\n  canActivate() {\n    return this.authService.AuthState().pipe(\n      map(isLoggedIn => {\n        if (isLoggedIn) {\n          this.router.navigate(['chat']);\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","resolvedModuleNames":["C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/auth/services/auth.service.ts","C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/services/local-storage.service.ts"]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\services\\local-storage.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport * as CryptoJS from 'crypto-js';\nimport { environment } from '@env/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LocalStorageService {\n  private readonly key: string;\n\n  constructor() {\n    this.key = environment.applicationSecret;\n  }\n\n  public save(key: string, value: string) {\n    localStorage.setItem(key, this.encrypt(value));\n  }\n\n  public get(key: string) {\n    const data = localStorage.getItem(key) || '';\n    return this.decrypt(data);\n  }\n\n  public remove(key: string) {\n    localStorage.removeItem(key);\n  }\n\n  public clear() {\n    localStorage.clear();\n  }\n\n  private encrypt(txt: string): string {\n    return CryptoJS.AES.encrypt(txt, this.key).toString();\n  }\n\n  private decrypt(txtToDecrypt: string) {\n    return CryptoJS.AES.decrypt(txtToDecrypt, this.key).toString(\n      CryptoJS.enc.Utf8\n    );\n  }\n}\n","resolvedModuleNames":["C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/environments/environment.ts"]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\auth\\components\\login\\login.component.ts",{"fileContent":"import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent {\n  headerText = 'Firebase Chat Authentication';\n}\n","resolvedModuleNames":[]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\chat\\components\\chat-room\\chat-room.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '@app/auth/services/auth.service';\nimport { FirebaseService } from '@app/services/firebase.service';\n\n@Component({\n  selector: 'app-chat-room',\n  templateUrl: './chat-room.component.html',\n  styleUrls: ['./chat-room.component.scss'],\n})\nexport class ChatRoomComponent implements OnInit {\n  getUsers$ = this.firebaseService.users$;\n\n  constructor(\n    private authService: AuthService,\n    private firebaseService: FirebaseService\n  ) {}\n\n  ngOnInit(): void {\n    this.firebaseService.onChangeUserCollection();\n  }\n\n  signOut() {\n    this.authService.SignOut().subscribe();\n  }\n}\n","resolvedModuleNames":["C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/auth/services/auth.service.ts","C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/services/firebase.service.ts","C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/services/local-storage.service.ts","C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/interfaces/collection.enum.ts","C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/interfaces/user.interface.ts"]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\chat\\components\\chat-header\\chat-header.component.ts",{"fileContent":"import { Component } from '@angular/core';\nimport { User } from '@app/interfaces/user.interface';\nimport { FirebaseService } from '@app/services/firebase.service';\nimport { map, Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-chat-header',\n  templateUrl: './chat-header.component.html',\n  styleUrls: ['./chat-header.component.scss'],\n})\nexport class ChatHeaderComponent {\n  user$: Observable<User> = this.firebaseService.getUser().pipe(\n    map(x => {\n      return {\n        uid: x?.uid,\n        photoURL: x?.photoURL,\n        email: x?.email,\n        emailVerified: x?.emailVerified,\n        displayName: x?.displayName,\n        isLoggedIn: true,\n      } as User;\n    })\n  );\n\n  constructor(private firebaseService: FirebaseService) {}\n  appTitle = 'Firebase Chat';\n}\n","resolvedModuleNames":["C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/interfaces/user.interface.ts","C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/services/firebase.service.ts","C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/interfaces/collection.enum.ts"]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\auth\\components\\google-login\\google-login.component.ts",{"fileContent":"import { Component } from '@angular/core';\nimport { AuthService } from '@app/auth/services/auth.service';\nimport { Router } from '@angular/router';\nimport { EMPTY, switchMap } from 'rxjs';\nimport { FirebaseService } from '@app/services/firebase.service';\n\n@Component({\n  selector: 'app-google-login',\n  templateUrl: './google-login.component.html',\n  styleUrls: ['./google-login.component.scss'],\n})\nexport class GoogleLoginComponent {\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private firebaseService: FirebaseService\n  ) {}\n\n  buttonText = 'Sign in with Google';\n\n  googleAuth() {\n    this.authService\n      .SignIn()\n      .pipe(\n        switchMap(({ user }) =>\n          user\n            ? this.firebaseService.saveUser({\n                uid: user.uid,\n                email: user.email || 'N/A',\n                displayName: user.displayName || 'N/A',\n                photoURL: user.photoURL || 'N/A',\n                emailVerified: user.emailVerified,\n                isLoggedIn: true,\n              })\n            : EMPTY\n        )\n      )\n      .subscribe({\n        next: () => this.router.navigate(['chat']),\n      });\n  }\n}\n","resolvedModuleNames":["C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/auth/services/auth.service.ts","C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/services/firebase.service.ts","C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/services/local-storage.service.ts","C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/interfaces/collection.enum.ts","C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/interfaces/user.interface.ts"]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\auth\\services\\auth.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport * as auth from 'firebase/auth';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport firebase from 'firebase/compat';\nimport { from, map, Observable, tap } from 'rxjs';\nimport { LocalStorageService } from '@app/services/local-storage.service';\nimport { Router } from '@angular/router';\n\nexport enum Auth {\n  User = 'user',\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(\n    private ngFirebaseAuth: AngularFireAuth,\n    private ngLocalStorage: LocalStorageService,\n    private router: Router\n  ) {}\n\n  SignIn() {\n    return this.AuthLogin(new auth.GoogleAuthProvider());\n  }\n\n  FacebookSignIn() {\n    return this.AuthLogin(new auth.FacebookAuthProvider());\n  }\n\n  SignOut(): Observable<void> {\n    return from(this.ngFirebaseAuth.signOut()).pipe(\n      tap(() => {\n        this.ngLocalStorage.remove(Auth.User);\n        this.router.navigate(['login']);\n      })\n    );\n  }\n\n  AuthState() {\n    return this.ngFirebaseAuth.authState.pipe(\n      map(user => {\n        if (user) {\n          this.ngLocalStorage.save(Auth.User, JSON.stringify(user));\n          return true;\n        } else {\n          this.ngLocalStorage.remove(Auth.User);\n          return false;\n        }\n      })\n    );\n  }\n\n  private AuthLogin(\n    provider: firebase.auth.AuthProvider\n  ): Observable<firebase.auth.UserCredential> {\n    return from(this.ngFirebaseAuth.signInWithPopup(provider));\n  }\n}\n","resolvedModuleNames":["C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/services/local-storage.service.ts","C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/environments/environment.ts"]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\auth\\guards\\auth.guard.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { map } from 'rxjs';\nimport { AuthService } from '@app/auth/services/auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard {\n  constructor(private authService: AuthService, public router: Router) {}\n\n  canActivate() {\n    return this.authService.AuthState().pipe(\n      map(isLoggedIn => {\n        if (!isLoggedIn) {\n          this.router.navigate(['login']);\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","resolvedModuleNames":["C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/auth/services/auth.service.ts","C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/services/local-storage.service.ts"]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\interfaces\\collection.enum.ts",{"fileContent":"export enum Collection {\n  User = 'users',\n}\n","resolvedModuleNames":[]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\services\\firebase.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { Collection } from '@app/interfaces/collection.enum';\nimport { User } from '@app/interfaces/user.interface';\nimport {\n  collection,\n  addDoc,\n  getFirestore,\n  Firestore,\n  updateDoc,\n  doc,\n  onSnapshot,\n  getDoc,\n} from 'firebase/firestore';\nimport { BehaviorSubject, defer, from, map, switchMap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FirebaseService {\n  private _users$ = new BehaviorSubject<User[]>([]);\n  private readonly db: Firestore;\n  readonly users$ = this._users$.asObservable();\n\n  constructor() {\n    this.db = getFirestore();\n  }\n\n  saveUser(user: User) {\n    return this.getUser(user.uid).pipe(\n      switchMap(isRegistered =>\n        !isRegistered\n          ? defer(() =>\n              addDoc(collection(this.db, Collection.User), {\n                uid: user.uid,\n                email: user.email,\n                displayName: user.displayName,\n                photoURL: user.photoURL,\n                emailVerified: user.emailVerified,\n                isLoggedIn: user.isLoggedIn,\n              })\n            )\n          : this.updateUser(user)\n      )\n    );\n  }\n\n  getUser(uid: string) {\n    return from(getDoc(doc(this.db, Collection.User, uid))).pipe(\n      map(x => x.exists())\n    );\n  }\n\n  updateUser(user: User) {\n    return from(\n      updateDoc(doc(this.db, Collection.User, user.uid), {\n        email: user.email,\n        displayName: user.displayName,\n        photoURL: user.photoURL,\n        emailVerified: user.emailVerified,\n        isLoggedIn: user.isLoggedIn,\n      })\n    );\n  }\n\n  onChangeUserCollection() {\n    const query = collection(this.db, Collection.User);\n    onSnapshot(query, onChange => {\n      onChange.docs.forEach(j => {\n        this._users$.next([...this._users$.getValue(), j.data() as User]);\n      });\n    });\n  }\n}\n","resolvedModuleNames":["C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/interfaces/collection.enum.ts","C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/interfaces/user.interface.ts"]}]]