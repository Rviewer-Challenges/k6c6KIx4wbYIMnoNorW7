[["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\interfaces\\user.interface.ts",{"fileContent":"export interface IUser {\n  uid: string;\n  email: string;\n  displayName: string;\n  photoURL: string;\n  emailVerified: boolean;\n  isLoggedIn: boolean;\n}\n\nexport interface isUserLogged {\n  uid: string;\n  isLoggedIn: boolean;\n}\n\nexport enum UserStatus {\n  notAvailable = 'N/A',\n}\n\nexport enum Collections {\n  Users = 'users',\n}\nexport enum StorageKeys {\n  User = 'user',\n}\n","resolvedModuleNames":[]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\app.component.ts",{"fileContent":"import { Component, OnDestroy, OnInit, Optional } from '@angular/core';\nimport { Auth, authState, User } from '@angular/fire/auth';\nimport {\n  combineLatest,\n  EMPTY,\n  from,\n  of,\n  Subscription,\n  switchMap,\n  tap,\n} from 'rxjs';\nimport {\n  Firestore,\n  getDoc,\n  setDoc,\n  updateDoc,\n  doc,\n} from '@angular/fire/firestore';\nimport { Collections, StorageKeys } from '@app/interfaces/user.interface';\nimport { LocalStorageService } from '@app/services/local-storage.service';\n\n@Component({\n  selector: 'app-root',\n  template: '<router-outlet></router-outlet>',\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  authStateSubscription: Subscription;\n  authState$ = authState(this.auth);\n\n  constructor(\n    @Optional() private firestore: Firestore,\n    @Optional() private auth: Auth,\n    private localStorageService: LocalStorageService\n  ) {}\n\n  ngOnInit() {\n    this.authStateSubscription = this.authState$\n      .pipe(\n        switchMap((aUser: User | null) => {\n          if (aUser) {\n            this.localStorageService.save(StorageKeys.User, aUser.uid);\n            return combineLatest([\n              from(getDoc(doc(this.firestore, Collections.Users, aUser.uid))),\n              of(aUser),\n            ]).pipe(\n              switchMap(([userDb, aUser]) => {\n                if (userDb.exists()) {\n                  return updateDoc(\n                    doc(this.firestore, Collections.Users, aUser.uid),\n                    {\n                      isLoggedIn: true,\n                    }\n                  );\n                } else {\n                  return from(\n                    setDoc(doc(this.firestore, Collections.Users, aUser.uid), {\n                      email: aUser.email,\n                      displayName: aUser.displayName,\n                      photoURL: aUser.photoURL,\n                      emailVerified: aUser.email,\n                      isLoggedIn: true,\n                    })\n                  );\n                }\n              })\n            );\n          } else {\n            const userUid = this.localStorageService.get(StorageKeys.User);\n            if (userUid) {\n              return from(\n                updateDoc(doc(this.firestore, Collections.Users, userUid), {\n                  isLoggedIn: false,\n                })\n              ).pipe(tap(() => this.localStorageService.clear()));\n            } else {\n              return EMPTY;\n            }\n          }\n        })\n      )\n      .subscribe();\n  }\n\n  ngOnDestroy() {\n    this.authStateSubscription.unsubscribe();\n  }\n}\n","resolvedModuleNames":["C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/interfaces/user.interface.ts","C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/services/local-storage.service.ts","C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/environments/environment.ts"]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\auth\\guards\\is-auth.guard.ts",{"fileContent":"import { Injectable, Optional } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { map } from 'rxjs';\nimport { Auth, authState } from '@angular/fire/auth';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IsAuthGuard {\n  authState$ = authState(this.auth);\n\n  constructor(@Optional() private auth: Auth, public router: Router) {}\n\n  canActivate() {\n    return this.authState$.pipe(\n      map(user => {\n        if (user) {\n          this.router.navigate(['chat']);\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","resolvedModuleNames":[]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\services\\local-storage.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport * as CryptoJS from 'crypto-js';\nimport { environment } from '@env/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LocalStorageService {\n  private readonly key: string;\n\n  constructor() {\n    this.key = environment.applicationSecret;\n  }\n\n  public save(key: string, value: string) {\n    localStorage.setItem(key, this.encrypt(value));\n  }\n\n  public get(key: string) {\n    const data = localStorage.getItem(key) || '';\n    return this.decrypt(data);\n  }\n\n  public remove(key: string) {\n    localStorage.removeItem(key);\n  }\n\n  public clear() {\n    localStorage.clear();\n  }\n\n  private encrypt(txt: string): string {\n    return CryptoJS.AES.encrypt(txt, this.key).toString();\n  }\n\n  private decrypt(txtToDecrypt: string) {\n    return CryptoJS.AES.decrypt(txtToDecrypt, this.key).toString(\n      CryptoJS.enc.Utf8\n    );\n  }\n}\n","resolvedModuleNames":["C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/environments/environment.ts"]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\auth\\components\\login\\login.component.ts",{"fileContent":"import { Component } from '@angular/core';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent {\n  headerText = 'Firebase Chat Authentication';\n}\n","resolvedModuleNames":[]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\chat\\components\\chat-room\\chat-room.component.ts",{"fileContent":"import { Component, OnInit, Optional } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Auth } from '@angular/fire/auth';\nimport { Router } from '@angular/router';\n\nimport {\n  Firestore,\n  collectionData,\n  collection,\n  DocumentData,\n} from '@angular/fire/firestore';\nimport { Collections } from '@app/interfaces/user.interface';\n\n@Component({\n  selector: 'app-chat-room',\n  templateUrl: './chat-room.component.html',\n  styleUrls: ['./chat-room.component.scss'],\n})\nexport class ChatRoomComponent implements OnInit {\n  //private _users$ = new BehaviorSubject<IUser[]>([]);\n  public users$: Observable<DocumentData[]>;\n\n  constructor(\n    @Optional() private firestore: Firestore,\n    @Optional() private auth: Auth,\n    private router: Router\n  ) {}\n  ngOnInit(): void {\n    const userCollection = collection(this.firestore, Collections.Users);\n    this.users$ = collectionData(userCollection);\n  }\n\n  async signOut() {\n    await this.auth.signOut();\n    await this.router.navigate(['/login']);\n  }\n}\n","resolvedModuleNames":["C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/interfaces/user.interface.ts"]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\chat\\components\\chat-header\\chat-header.component.ts",{"fileContent":"import { Component, Optional } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Auth, user, User } from '@angular/fire/auth';\n\n@Component({\n  selector: 'app-chat-header',\n  templateUrl: './chat-header.component.html',\n  styleUrls: ['./chat-header.component.scss'],\n})\nexport class ChatHeaderComponent {\n  appTitle = 'Firebase Chat';\n\n  user$: Observable<User | null> = user(this.auth);\n  constructor(@Optional() private auth: Auth) {}\n}\n","resolvedModuleNames":[]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\auth\\components\\google-login\\google-login.component.ts",{"fileContent":"import { Component, Optional } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Auth, GoogleAuthProvider, signInWithPopup } from '@angular/fire/auth';\n\n@Component({\n  selector: 'app-google-login',\n  templateUrl: './google-login.component.html',\n  styleUrls: ['./google-login.component.scss'],\n})\nexport class GoogleLoginComponent {\n  buttonText = 'Sign in with Google';\n  constructor(@Optional() private auth: Auth, private router: Router) {}\n\n  async googleAuth() {\n    const provider = new GoogleAuthProvider();\n    await signInWithPopup(this.auth, provider);\n    await this.router.navigate(['/chat']);\n  }\n}\n","resolvedModuleNames":[]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\auth\\services\\auth.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {}\n","resolvedModuleNames":[]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\auth\\guards\\auth.guard.ts",{"fileContent":"import { Injectable, Optional } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Auth, authState } from '@angular/fire/auth';\nimport { map } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard {\n  authState$ = authState(this.auth);\n\n  constructor(@Optional() private auth: Auth, public router: Router) {}\n\n  canActivate() {\n    return this.authState$.pipe(\n      map(user => {\n        if (user) {\n          return true;\n        } else {\n          this.router.navigate(['login']);\n          return false;\n        }\n      })\n    );\n  }\n}\n","resolvedModuleNames":[]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\interfaces\\collection.enum.ts",{"fileContent":"export enum Collection {\n  User = 'users',\n}\n","resolvedModuleNames":[]}],["C:\\Users\\User\\Desktop\\k6c6KIx4wbYIMnoNorW7\\src\\app\\services\\firebase.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { Collection } from '@app/interfaces/collection.enum';\nimport { IUser } from '@app/interfaces/user.interface';\nimport {\n  collection,\n  addDoc,\n  getFirestore,\n  Firestore,\n  updateDoc,\n  doc,\n  onSnapshot,\n  getDoc,\n} from 'firebase/firestore';\nimport { BehaviorSubject, defer, from, map, switchMap } from 'rxjs';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FirebaseService {\n  private _users$ = new BehaviorSubject<IUser[]>([]);\n  private readonly db: Firestore;\n  readonly users$ = this._users$.asObservable();\n\n  constructor(private ngFirebaseAuth: AngularFireAuth) {\n    this.db = getFirestore();\n  }\n\n  saveUser(user: IUser) {\n    return this.checkUser(user.uid).pipe(\n      switchMap(isRegistered =>\n        !isRegistered\n          ? defer(() =>\n              addDoc(collection(this.db, Collection.User), {\n                uid: user.uid,\n                email: user.email,\n                displayName: user.displayName,\n                photoURL: user.photoURL,\n                emailVerified: user.emailVerified,\n                isLoggedIn: user.isLoggedIn,\n              })\n            )\n          : this.updateUser(user)\n      )\n    );\n  }\n\n  getUser() {\n    return this.ngFirebaseAuth.user;\n  }\n\n  checkUser(uid: string) {\n    return from(getDoc(doc(this.db, Collection.User, uid))).pipe(\n      map(x => x.exists())\n    );\n  }\n\n  updateUser(user: IUser) {\n    return from(\n      updateDoc(doc(this.db, Collection.User, user.uid), {\n        email: user.email,\n        displayName: user.displayName,\n        photoURL: user.photoURL,\n        emailVerified: user.emailVerified,\n        isLoggedIn: user.isLoggedIn,\n      })\n    );\n  }\n\n  onChangeUserCollection() {\n    const query = collection(this.db, Collection.User);\n    onSnapshot(query, onChange => {\n      onChange.docs.forEach(j => {\n        this._users$.next([...this._users$.getValue(), j.data() as IUser]);\n      });\n    });\n  }\n}\n","resolvedModuleNames":["C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/interfaces/collection.enum.ts","C:/Users/User/Desktop/k6c6KIx4wbYIMnoNorW7/src/app/interfaces/user.interface.ts"]}]]