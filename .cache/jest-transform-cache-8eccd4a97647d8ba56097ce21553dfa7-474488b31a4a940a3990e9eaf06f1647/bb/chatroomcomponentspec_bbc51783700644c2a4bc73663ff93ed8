24630bb78d79811024f0016e128c46ec
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('@app/auth/services/auth.service');
const testing_1 = require("@angular/core/testing");
const auth_service_1 = require("@app/auth/services/auth.service");
const chat_header_component_1 = require("@app/chat/components/chat-header/chat-header.component");
const app_1 = require("firebase/app");
const environment_1 = require("@env/environment");
const chat_room_component_1 = require("@app/chat/components/chat-room/chat-room.component");
const firebase_service_1 = require("@app/services/firebase.service");
const rxjs_1 = require("rxjs");
const user_mock_1 = require("../../../../__test__/user.mock");
(0, app_1.initializeApp)(environment_1.environment.firebase);
describe('ChatRoomComponent', () => {
    let component;
    let fixture;
    beforeEach(() => {
        testing_1.TestBed.configureTestingModule({
            declarations: [chat_room_component_1.ChatRoomComponent, chat_header_component_1.ChatHeaderComponent],
            providers: [
                auth_service_1.AuthService,
                {
                    provide: firebase_service_1.FirebaseService,
                    useValue: {
                        getUser() {
                            return (0, rxjs_1.of)(user_mock_1.userMock);
                        },
                    },
                },
            ],
        });
        fixture = testing_1.TestBed.createComponent(chat_room_component_1.ChatRoomComponent);
        component = fixture.componentInstance;
        fixture.detectChanges();
    });
    it('should create', () => {
        expect(component).toBeTruthy();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxVc2VyXFxEZXNrdG9wXFxrNmM2S0l4NHdiWUlNbm9Ob3JXN1xcc3JjXFxhcHBcXGNoYXRcXGNvbXBvbmVudHNcXGNoYXQtcm9vbVxcY2hhdC1yb29tLmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBV0EsSUFBSSxDQUFDLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0FBWDdDLG1EQUFrRTtBQUNsRSxrRUFBOEQ7QUFFOUQsa0dBQTZGO0FBQzdGLHNDQUE2QztBQUM3QyxrREFBK0M7QUFDL0MsNEZBQXVGO0FBQ3ZGLHFFQUFpRTtBQUNqRSwrQkFBMEI7QUFDMUIsOERBQTBEO0FBSTFELElBQUEsbUJBQWEsRUFBQyx5QkFBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRXBDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7SUFDakMsSUFBSSxTQUE0QixDQUFDO0lBQ2pDLElBQUksT0FBNEMsQ0FBQztJQUVqRCxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztZQUM3QixZQUFZLEVBQUUsQ0FBQyx1Q0FBaUIsRUFBRSwyQ0FBbUIsQ0FBQztZQUN0RCxTQUFTLEVBQUU7Z0JBQ1QsMEJBQVc7Z0JBQ1g7b0JBQ0UsT0FBTyxFQUFFLGtDQUFlO29CQUN4QixRQUFRLEVBQUU7d0JBQ1IsT0FBTzs0QkFDTCxPQUFPLElBQUEsU0FBRSxFQUFDLG9CQUFRLENBQUMsQ0FBQzt3QkFDdEIsQ0FBQztxQkFDRjtpQkFDRjthQUNGO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLHVDQUFpQixDQUFDLENBQUM7UUFDckQsU0FBUyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztRQUN0QyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDMUIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRTtRQUN2QixNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDakMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVzZXJcXERlc2t0b3BcXGs2YzZLSXg0d2JZSU1ub05vclc3XFxzcmNcXGFwcFxcY2hhdFxcY29tcG9uZW50c1xcY2hhdC1yb29tXFxjaGF0LXJvb20uY29tcG9uZW50LnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50Rml4dHVyZSwgVGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBBdXRoU2VydmljZSB9IGZyb20gJ0BhcHAvYXV0aC9zZXJ2aWNlcy9hdXRoLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9jYWxTdG9yYWdlU2VydmljZSB9IGZyb20gJ0BhcHAvc2VydmljZXMvbG9jYWwtc3RvcmFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IENoYXRIZWFkZXJDb21wb25lbnQgfSBmcm9tICdAYXBwL2NoYXQvY29tcG9uZW50cy9jaGF0LWhlYWRlci9jaGF0LWhlYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUFwcCB9IGZyb20gJ2ZpcmViYXNlL2FwcCc7XG5pbXBvcnQgeyBlbnZpcm9ubWVudCB9IGZyb20gJ0BlbnYvZW52aXJvbm1lbnQnO1xuaW1wb3J0IHsgQ2hhdFJvb21Db21wb25lbnQgfSBmcm9tICdAYXBwL2NoYXQvY29tcG9uZW50cy9jaGF0LXJvb20vY2hhdC1yb29tLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGaXJlYmFzZVNlcnZpY2UgfSBmcm9tICdAYXBwL3NlcnZpY2VzL2ZpcmViYXNlLnNlcnZpY2UnO1xuaW1wb3J0IHsgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHVzZXJNb2NrIH0gZnJvbSAnLi4vLi4vLi4vLi4vX190ZXN0X18vdXNlci5tb2NrJztcblxuamVzdC5tb2NrKCdAYXBwL2F1dGgvc2VydmljZXMvYXV0aC5zZXJ2aWNlJyk7XG5cbmluaXRpYWxpemVBcHAoZW52aXJvbm1lbnQuZmlyZWJhc2UpO1xuXG5kZXNjcmliZSgnQ2hhdFJvb21Db21wb25lbnQnLCAoKSA9PiB7XG4gIGxldCBjb21wb25lbnQ6IENoYXRSb29tQ29tcG9uZW50O1xuICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxDaGF0Um9vbUNvbXBvbmVudD47XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKHtcbiAgICAgIGRlY2xhcmF0aW9uczogW0NoYXRSb29tQ29tcG9uZW50LCBDaGF0SGVhZGVyQ29tcG9uZW50XSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICBBdXRoU2VydmljZSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEZpcmViYXNlU2VydmljZSxcbiAgICAgICAgICB1c2VWYWx1ZToge1xuICAgICAgICAgICAgZ2V0VXNlcigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG9mKHVzZXJNb2NrKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG4gICAgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KENoYXRSb29tQ29tcG9uZW50KTtcbiAgICBjb21wb25lbnQgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGNyZWF0ZScsICgpID0+IHtcbiAgICBleHBlY3QoY29tcG9uZW50KS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=